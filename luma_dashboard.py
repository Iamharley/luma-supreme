#!/usr/bin/env python3
"""
üî• LUMA BUSINESS PRO - DASHBOARD VISUEL
Interface pour voir LUMA en action
"""

import tkinter as tk
from tkinter import ttk, scrolledtext
import threading
import time
import asyncio
import sys
import os
from datetime import datetime

# Ajouter le r√©pertoire √† Python path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from core.main_engine import LumaBusinessEngine
from core.luma_personality import LumaPersonality
from dotenv import load_dotenv


class LumaDashboard:
    def __init__(self, root):
        self.root = root
        self.root.title("üî• LUMA BUSINESS PRO - DASHBOARD")
        self.root.geometry("1000x700")
        self.root.configure(bg='#1a1a1a')
        
        # Variables
        self.luma_running = False
        self.luma_engine = None
        self.personality = LumaPersonality()
        
        # Charger configuration
        load_dotenv('config/.env')
        self.config = {
            "openai_key": os.getenv("OPENAI_API_KEY"),
            "claude_key": os.getenv("CLAUDE_API_KEY"),
            "shopify_key": os.getenv("SHOPIFY_ACCESS_TOKEN"),
            "gmail_address": os.getenv("GMAIL_ADDRESS"),
            "notion_token": os.getenv("NOTION_TOKEN")
        }
        
        self.setup_ui()
        
    def setup_ui(self):
        """Configure l'interface utilisateur"""
        
        # Style
        style = ttk.Style()
        style.theme_use('clam')
        
        # Frame principal
        main_frame = tk.Frame(self.root, bg='#1a1a1a')
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # Titre
        title_label = tk.Label(
            main_frame, 
            text="üî• LUMA BUSINESS PRO", 
            font=("Arial", 24, "bold"),
            fg='#00ff88',
            bg='#1a1a1a'
        )
        title_label.pack(pady=10)
        
        # Sous-titre
        subtitle_label = tk.Label(
            main_frame,
            text="üíô Employ√©e digitale d'Anne-Sophie - Harley Vape",
            font=("Arial", 12),
            fg='#ffffff',
            bg='#1a1a1a'
        )
        subtitle_label.pack(pady=5)
        
        # Frame de contr√¥le
        control_frame = tk.Frame(main_frame, bg='#1a1a1a')
        control_frame.pack(fill=tk.X, pady=10)
        
        # Boutons de contr√¥le
        self.start_button = tk.Button(
            control_frame,
            text="üöÄ D√âMARRER LUMA",
            font=("Arial", 12, "bold"),
            bg='#00ff88',
            fg='#000000',
            command=self.start_luma,
            width=15,
            height=2
        )
        self.start_button.pack(side=tk.LEFT, padx=5)
        
        self.stop_button = tk.Button(
            control_frame,
            text="üõë ARR√äTER LUMA",
            font=("Arial", 12, "bold"),
            bg='#ff4444',
            fg='#ffffff',
            command=self.stop_luma,
            width=15,
            height=2,
            state=tk.DISABLED
        )
        self.stop_button.pack(side=tk.LEFT, padx=5)
        
        self.test_button = tk.Button(
            control_frame,
            text="üß™ TEST TEMPLATE",
            font=("Arial", 12, "bold"),
            bg='#4444ff',
            fg='#ffffff',
            command=self.test_template,
            width=15,
            height=2
        )
        self.test_button.pack(side=tk.LEFT, padx=5)
        
        # Status
        self.status_label = tk.Label(
            control_frame,
            text="‚è∏Ô∏è LUMA ARR√äT√â",
            font=("Arial", 14, "bold"),
            fg='#ff4444',
            bg='#1a1a1a'
        )
        self.status_label.pack(side=tk.RIGHT, padx=10)
        
        # Frame des logs
        logs_frame = tk.Frame(main_frame, bg='#1a1a1a')
        logs_frame.pack(fill=tk.BOTH, expand=True, pady=10)
        
        # Label logs
        logs_label = tk.Label(
            logs_frame,
            text="üìã LOGS EN TEMPS R√âEL",
            font=("Arial", 14, "bold"),
            fg='#00ff88',
            bg='#1a1a1a'
        )
        logs_label.pack(anchor=tk.W, pady=5)
        
        # Zone de logs
        self.logs_text = scrolledtext.ScrolledText(
            logs_frame,
            height=20,
            bg='#000000',
            fg='#00ff88',
            font=("Courier", 10),
            insertbackground='#00ff88'
        )
        self.logs_text.pack(fill=tk.BOTH, expand=True)
        
        # Frame des actions
        actions_frame = tk.Frame(main_frame, bg='#1a1a1a')
        actions_frame.pack(fill=tk.X, pady=10)
        
        # Actions rapides
        actions_label = tk.Label(
            actions_frame,
            text="‚ö° ACTIONS RAPIDES",
            font=("Arial", 14, "bold"),
            fg='#00ff88',
            bg='#1a1a1a'
        )
        actions_label.pack(anchor=tk.W, pady=5)
        
        # Boutons d'actions
        actions_buttons_frame = tk.Frame(actions_frame, bg='#1a1a1a')
        actions_buttons_frame.pack(fill=tk.X)
        
        tk.Button(
            actions_buttons_frame,
            text="üåû Briefing Matinal",
            font=("Arial", 10),
            bg='#4444ff',
            fg='#ffffff',
            command=lambda: self.generate_message('morning_briefing'),
            width=15
        ).pack(side=tk.LEFT, padx=5)
        
        tk.Button(
            actions_buttons_frame,
            text="üö® Alerte Urgente",
            font=("Arial", 10),
            bg='#ff4444',
            fg='#ffffff',
            command=lambda: self.generate_message('urgent_alert'),
            width=15
        ).pack(side=tk.LEFT, padx=5)
        
        tk.Button(
            actions_buttons_frame,
            text="üìä Rapport Business",
            font=("Arial", 10),
            bg='#44ff44',
            fg='#000000',
            command=lambda: self.generate_message('business_report'),
            width=15
        ).pack(side=tk.LEFT, padx=5)
        
        tk.Button(
            actions_buttons_frame,
            text="üí¨ Message Personnalis√©",
            font=("Arial", 10),
            bg='#ff8844',
            fg='#ffffff',
            command=self.custom_message,
            width=15
        ).pack(side=tk.LEFT, padx=5)
        
    def log_message(self, message):
        """Ajoute un message aux logs"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        log_entry = f"[{timestamp}] {message}\n"
        self.logs_text.insert(tk.END, log_entry)
        self.logs_text.see(tk.END)
        self.root.update()
        
    def start_luma(self):
        """D√©marre LUMA"""
        if not self.luma_running:
            self.log_message("üöÄ D√©marrage de LUMA Business Pro...")
            self.luma_running = True
            self.status_label.config(text="üü¢ LUMA ACTIF", fg='#00ff88')
            self.start_button.config(state=tk.DISABLED)
            self.stop_button.config(state=tk.NORMAL)
            
            # D√©marrer LUMA dans un thread s√©par√©
            self.luma_thread = threading.Thread(target=self.run_luma_async)
            self.luma_thread.daemon = True
            self.luma_thread.start()
            
            self.log_message("‚úÖ LUMA Business Engine initialis√©")
            self.log_message("üíô Propri√©taire: Anne-Sophie")
            self.log_message("üè¢ Business: Harley Vape")
            self.log_message("‚ö° Mode: Proactif 24/7")
            self.log_message("üìß Surveillance: hello@iamharley.com")
            
    def stop_luma(self):
        """Arr√™te LUMA"""
        if self.luma_running:
            self.log_message("üõë Arr√™t de LUMA...")
            self.luma_running = False
            self.status_label.config(text="‚è∏Ô∏è LUMA ARR√äT√â", fg='#ff4444')
            self.start_button.config(state=tk.NORMAL)
            self.stop_button.config(state=tk.DISABLED)
            
            if self.luma_engine:
                # Arr√™ter le moteur
                pass
                
            self.log_message("‚úÖ LUMA arr√™t√© proprement")
            
    def run_luma_async(self):
        """Ex√©cute LUMA de mani√®re asynchrone"""
        try:
            self.luma_engine = LumaBusinessEngine(self.config)
            
            # Simuler des op√©rations en cours
            while self.luma_running:
                time.sleep(5)
                self.log_message("‚è∞ V√©rification des t√¢ches programm√©es...")
                time.sleep(5)
                self.log_message("üìß Surveillance des emails...")
                time.sleep(5)
                self.log_message("üõí Monitoring business Harley Vape...")
                
        except Exception as e:
            self.log_message(f"‚ùå Erreur: {e}")
            
    def test_template(self):
        """Teste un template de message"""
        self.log_message("üß™ Test du template Lulu...")
        
        morning_context = {
            'emails': '3',
            'orders': '1', 
            'whatsapp': '2',
            'insight': 'Journ√©e productive en vue !'
        }
        
        try:
            message = self.personality.generate_response('morning_briefing', morning_context)
            self.log_message("üåû Template g√©n√©r√©:")
            self.log_message(message)
        except Exception as e:
            self.log_message(f"‚ùå Erreur template: {e}")
            
    def generate_message(self, message_type):
        """G√©n√®re un message sp√©cifique"""
        self.log_message(f"üí¨ G√©n√©ration message: {message_type}")
        
        try:
            if message_type == 'morning_briefing':
                context = {'emails': '5', 'orders': '2', 'whatsapp': '1', 'insight': 'Belle journ√©e en perspective !'}
                message = self.personality.generate_response('morning_briefing', context)
            elif message_type == 'urgent_alert':
                context = {'alert_type': 'client_urgent', 'priority': 'high', 'action': 'd√©cision_requise'}
                message = self.personality.generate_response('urgent_alert', context)
            elif message_type == 'business_report':
                context = {'sales': '1500‚Ç¨', 'orders': '8', 'customers': '12', 'trend': 'positif'}
                message = self.personality.generate_response('business_report', context)
            else:
                message = "Message personnalis√© g√©n√©r√© !"
                
            self.log_message("üìù Message g√©n√©r√©:")
            self.log_message(message)
            
        except Exception as e:
            self.log_message(f"‚ùå Erreur g√©n√©ration: {e}")
            
    def custom_message(self):
        """Interface pour message personnalis√©"""
        self.log_message("üí¨ Interface message personnalis√©...")
        # Ici on pourrait ouvrir une fen√™tre de dialogue
        self.log_message("‚ú® Fonctionnalit√© √† d√©velopper")


def main():
    """Point d'entr√©e principal"""
    root = tk.Tk()
    app = LumaDashboard(root)
    root.mainloop()


if __name__ == "__main__":
    main() 