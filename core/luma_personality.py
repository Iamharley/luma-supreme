"""
üß¨ LUMA Personality System
Personnalit√© et templates de conversation pour Anne-Sophie
"""

import random
from typing import Dict, Any, Optional, List
from datetime import datetime
import asyncio
import subprocess
import json
import re
import logging
import os
import openai
from openai import OpenAI


class ConversationTemplate:
    """Templates de conversation personnalis√©s pour Anne-Sophie"""
    
    def __init__(self):
        self.templates = {
            "morning_briefing": {
                "greeting": [
                    "Bonjour Anne-Sophie üåû",
                    "Salut ma belle ! ‚òÄÔ∏è",
                    "Hey Anne-Sophie, bonne journ√©e ! üåÖ"
                ],
                "structure": [
                    "Voici ton point du jour :",
                    "R√©sum√© de la situation :",
                    "√âtat des lieux :"
                ],
                "closing": [
                    "üß† Tu veux que je g√®re un truc aujourd'hui ?",
                    "üí™ Besoin d'aide sur quelque chose ?",
                    "üéØ Qu'est-ce que je peux faire pour toi ?"
                ]
            },
            "urgent_alert": {
                "warning": [
                    "üö® URGENT - ",
                    "‚ö†Ô∏è ATTENTION - ",
                    "üî• PRIORIT√â - "
                ],
                "action": [
                    "Action requise imm√©diatement",
                    "Besoin de ta d√©cision",
                    "Intervention n√©cessaire"
                ]
            },
            "business_update": {
                "positive": [
                    "‚úÖ Excellente nouvelle !",
                    "üéâ Super r√©sultat !",
                    "üí™ Parfait travail !"
                ],
                "neutral": [
                    "üìä Mise √† jour business :",
                    "üíº √âtat des affaires :",
                    "üìà Situation actuelle :"
                ]
            }
        }
    
    def get_template(self, template_name: str, context: Dict[str, Any] = None) -> str:
        """G√©n√®re un message bas√© sur un template"""
        if template_name not in self.templates:
            return "Message par d√©faut"
        
        template = self.templates[template_name]
        context = context or {}
        
        if template_name == "morning_briefing":
            return self._generate_morning_briefing(template, context)
        elif template_name == "urgent_alert":
            return self._generate_urgent_alert(template, context)
        elif template_name == "business_update":
            return self._generate_business_update(template, context)
        
        return "Template non reconnu"
    
    def _generate_morning_briefing(self, template: Dict, context: Dict) -> str:
        """G√©n√®re le briefing matinal"""
        greeting = random.choice(template["greeting"])
        structure = random.choice(template["structure"])
        closing = random.choice(template["closing"])
        
        # Construire le contenu
        content_parts = []
        
        if context.get("emails"):
            content_parts.append(f"üì© {context['emails']} mails prioritaires")
        
        if context.get("orders"):
            content_parts.append(f"üõí {context['orders']} commandes Shopify")
        
        if context.get("whatsapp"):
            content_parts.append(f"üîî {context['whatsapp']} client(s) WhatsApp en attente")
        
        if context.get("insight"):
            content_parts.append(f"üí° Conseil : {context['insight']}")
        
        content = "\n".join(content_parts) if content_parts else "Aucune activit√© majeure"
        
        return f"{greeting}\n{structure}\n{content}\n{closing}"
    
    def _generate_urgent_alert(self, template: Dict, context: Dict) -> str:
        """G√©n√®re une alerte urgente"""
        warning = random.choice(template["warning"])
        action = random.choice(template["action"])
        
        message = context.get("message", "Alerte sans message")
        return f"{warning}{message}\n{action}"
    
    def _generate_business_update(self, template: Dict, context: Dict) -> str:
        """G√©n√®re une mise √† jour business"""
        if context.get("positive", False):
            intro = random.choice(template["positive"])
        else:
            intro = random.choice(template["neutral"])
        
        message = context.get("message", "Mise √† jour business")
        return f"{intro}\n{message}"


class NaturalTemplates:
    """Syst√®me de templates naturels multilingues pour LUMA"""
    
    def __init__(self):
        self.templates = {
            'en': {
                'greeting_new': ["Hey! What can I help you with?", "Hi there! What do you need?"],
                'greeting_return': ["What's up?", "How can I help?", "Need anything?"],
                'products': ["What are you looking for?", "Which product interests you?"],
                'hours': ["We're open 12pm-9pm daily. Coming by?", "Open until 9pm. What do you need?"],
                'prices': ["Depends what you want. What are you interested in?"],
                'general': ["What do you need?", "How can I help?", "What's up?"]
            },
            'fr': {
                'greeting_new': ["Salut ! Je peux t'aider ?", "Hey ! Qu'est-ce qu'il te faut ?"],
                'greeting_return': ["Salut !", "Je peux t'aider ?", "Tu veux quoi ?"],
                'products': ["Tu cherches quoi ?", "Quel produit t'int√©resse ?"],
                'hours': ["Ouvert 12h-21h tous les jours. Tu passes ?", "Jusqu'√† 21h. Tu veux quoi ?"],
                'prices': ["√áa d√©pend de quoi. Dis-moi ce qui t'int√©resse ?"],
                'general': ["Tu veux quoi ?", "Je peux t'aider ?", "Qu'est-ce qu'il te faut ?"]
            },
            'es': {
                'greeting_new': ["¬°Hola! ¬øEn qu√© te puedo ayudar?", "¬°Hey! ¬øQu√© necesitas?"],
                'greeting_return': ["¬øQu√© tal?", "¬øTe ayudo en algo?", "¬øNecesitas algo?"],
                'products': ["¬øQu√© buscas?", "¬øQu√© producto te interesa?"],
                'hours': ["Abierto de 12 a 21h todos los d√≠as. ¬øVienes?", "Hasta las 21h. ¬øQu√© necesitas?"],
                'prices': ["Depende de qu√© quieras. ¬øQu√© te interesa?"],
                'general': ["¬øQu√© necesitas?", "¬øTe ayudo?", "¬øQu√© pasa?"]
            },
            'it': {
                'greeting_new': ["Ciao! Come posso aiutarti?", "Hey! Di cosa hai bisogno?"],
                'greeting_return': ["Ciao!", "Ti serve qualcosa?", "Come va?"],
                'products': ["Cosa cerchi?", "Quale prodotto ti interessa?"],
                'hours': ["Aperto 12-21 tutti i giorni. Passi?", "Fino alle 21. Cosa ti serve?"],
                'prices': ["Dipende da cosa vuoi. Dimmi cosa ti interessa?"],
                'general': ["Cosa ti serve?", "Come ti aiuto?", "Dimmi!"]
            },
            'pt': {
                'greeting_new': ["Oi! Como posso ajudar?", "E a√≠! O que voc√™ precisa?"],
                'greeting_return': ["E a√≠!", "Precisa de algo?", "Como vai?"],
                'products': ["O que voc√™ est√° procurando?", "Qual produto te interessa?"],
                'hours': ["Aberto 12h-21h todo dia. Vai passar aqui?", "At√© √†s 21h. O que precisa?"],
                'prices': ["Depende do que voc√™ quer. Me diz o que te interessa?"],
                'general': ["O que voc√™ precisa?", "Como te ajudo?", "Fala a√≠!"]
            }
        }
        
        self.client_memory = {}  # M√©moire par client
    
    def detect_language(self, message: str) -> str:
        """D√©tecte la langue du message"""
        message_lower = message.lower()
        
        # D√©tection h√©breu (caract√®res h√©breux)
        hebrew_chars = re.search(r'[\u0590-\u05FF]', message)
        if hebrew_chars:
            return 'he'
        
        patterns = {
            'en': r'\b(hello|hi|hey|what|how|can|you|help|thanks|price|cost|open|hours)\b',
            'es': r'\b(hola|qu√©|c√≥mo|puedes|ayuda|gracias|precio|cu√°nto|abierto|horas)\b',
            'fr': r'\b(bonjour|salut|quoi|comment|peux|aide|merci|prix|combien|ouvert|horaires)\b',
            'it': r'\b(ciao|cosa|come|puoi|aiuto|grazie|prezzo|quanto|aperto|ore)\b',
            'pt': r'\b(ol√°|oi|que|como|pode|ajuda|obrigado|pre√ßo|quanto|aberto|horas)\b'
        }
        
        for lang, pattern in patterns.items():
            if re.search(pattern, message_lower):
                return lang
        
        return 'fr'  # d√©faut fran√ßais
    
    def analyze_context(self, message: str) -> str:
        """Analyse le contexte du message"""
        msg = message.lower()
        
        if any(word in msg for word in ['price', 'cost', 'precio', 'prix', 'pre√ßo', 'cu√°nto', 'combien', 'quanto']):
            return 'prices'
        elif any(word in msg for word in ['open', 'hours', 'horaire', 'abierto', 'aberto', 'ferm√©', 'closed', 'horas', 'ore']):
            return 'hours'
        elif any(word in msg for word in ['product', 'vape', 'disponible', 'available', 'producto', 'produit', 'geekbar']):
            return 'products'
        elif any(word in msg for word in ['hi', 'hello', 'hola', 'salut', 'ciao', 'oi', 'hey']):
            return 'greeting'
        else:
            return 'general'
    
    def generate_natural_response(self, client_id: str, message: str) -> str:
        """G√©n√®re une r√©ponse naturelle bas√©e sur les templates"""
        lang = self.detect_language(message)
        is_new_client = client_id not in self.client_memory
        context = self.analyze_context(message)
        
        # D√©terminer la cat√©gorie de template
        if context == 'greeting':
            template_category = 'greeting_new' if is_new_client else 'greeting_return'
        else:
            template_category = context
        
        # S√©lectionner r√©ponse al√©atoire
        templates = self.templates[lang][template_category]
        response = random.choice(templates)
        
        # Sauvegarder en m√©moire
        self.client_memory[client_id] = {
            'last_message': message,
            'language': lang,
            'context': context,
            'timestamp': asyncio.get_event_loop().time()
        }
        
        return response


class LumaPersonality:
    """Personnalit√© LUMA pour Anne-Sophie"""
    
    def __init__(self):
        self.name = "LUMA"
        self.owner = "Anne-Sophie"
        self.business = "Harley Vape"
        self.templates = ConversationTemplate()
        # Clients d√©j√† vus pour d√©tecter premier contact
        self.known_clients = set()
        
        # Configuration OpenRouter
        self.openrouter_api_key = os.getenv('OPENROUTER_API_KEY', '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')
        self.openrouter_model = os.getenv('OPENROUTER_MODEL', 'openai/gpt-4-turbo')
        
        # Configuration OpenAI pour OpenRouter
        try:
            self.openai_client = OpenAI(
                api_key=self.openrouter_api_key,
                base_url="https://openrouter.ai/api/v1"
            )
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur OpenRouter: {e}")
            self.openai_client = None
        
        self.personality_traits = {
            "professional": True,
            "warm": True,
            "proactive": True,
            "efficient": True,
            "supportive": True,
            "chill": True,
            "friendly": True
        }
        
        # Personnalit√© authentique Harley Vape
        self.introduction = {
            "en": "Hey there! üëã I'm Luma ‚Äî the AI of the Harley Vape Team üå¨Ô∏èüåàüêæ\nWe're a chill crew, always happy to help you find your perfect puff üí®",
            "fr": "Salut ! üëã Je suis Luma ‚Äî l'IA de l'√©quipe Harley Vape üå¨Ô∏èüåàüêæ\nOn est une √©quipe cool, toujours ravis de vous aider √† trouver votre puff parfait üí®"
        }
        
        self.hours = {
            "en": "üïõ Opening hours: 12:00 PM ‚Äì 9:00 PM (Paris time)",
            "fr": "üïõ Horaires d'ouverture : 12h00 ‚Äì 21h00 (heure de Paris)"
        }
        
        self.availability = {
            "en": "üí¨ Available here on WhatsApp 24/7",
            "fr": "üí¨ Disponible ici sur WhatsApp 24h/24"
        }
        
        self.website = {
            "en": "üåê Website coming soon ‚Üí www.harleyvape.love",
            "fr": "üåê Site web bient√¥t disponible ‚Üí www.harleyvape.love"
        }
        
        self.signature = {
            "en": "Talk soon!\n‚Äì Team Harley Vape üß°",
            "fr": "√Ä bient√¥t !\n‚Äì L'√©quipe Harley Vape üß°"
        }
    
    def generate_response(self, template_name: str, context: Dict[str, Any] = None) -> str:
        """G√©n√®re une r√©ponse personnalis√©e"""
        return self.templates.get_template(template_name, context)
    
    def get_personality_context(self) -> Dict[str, Any]:
        """Retourne le contexte de personnalit√©"""
        return {
            "name": self.name,
            "owner": self.owner,
            "business": self.business,
            "traits": self.personality_traits,
            "timestamp": datetime.now().isoformat()
        }
    
    def is_first_contact(self, client_number: str) -> bool:
        """D√©tecte si c'est le premier contact avec ce client"""
        if client_number not in self.known_clients:
            self.known_clients.add(client_number)
            return True
        return False
    
    def should_transfer_to_human(self, message: str, conversation_history: list = None) -> bool:
        """D√©tecte si la conversation doit √™tre transf√©r√©e √† une vraie personne"""
        message_lower = message.lower()
        
        # üö® MOTS CL√âS URGENTS = Transfert imm√©diat
        urgent_keywords = [
            'plainte', 'r√©clamation', 'probl√®me', 'd√©faut', 'cass√©', 'march√© pas',
            'remboursement', 'argent', 'facture', 'commande', 'livraison',
            'urgent', 'important', 'grave', 's√©rieux'
        ]
        
        for keyword in urgent_keywords:
            if keyword in message_lower:
                return True
        
        # ü§ù QUESTIONS COMPLEXES = Transfert
        complex_questions = [
            'comment √ßa marche', 'explique-moi', 'd√©taill√©', 'sp√©cifique',
            'technique', 'm√©canisme', 'fonctionnement', 'diff√©rence entre'
        ]
        
        for question in complex_questions:
            if question in message_lower:
                return True
        
        # üí∞ N√âGOCIATION = Transfert
        negotiation_words = [
            'prix', 'co√ªt', 'tarif', 'r√©duction', 'promotion', 'offre',
            'moins cher', 'bon plan', 'deal', 'marchandage'
        ]
        
        for word in negotiation_words:
            if word in message_lower:
                return True
        
        # üìû DEMANDE DE CONTACT = Transfert
        contact_requests = [
            'parler √†', 'vraie personne', 'humain', 'responsable',
            'manager', 'patron', 'propri√©taire', 'directeur'
        ]
        
        for request in contact_requests:
            if request in message_lower:
                return True
        
        # üîÑ CONVERSATION TROP LONGUE = Transfert apr√®s 5 √©changes
        if conversation_history and len(conversation_history) >= 5:
            return True
        
        return False
    
    def generate_transfer_message(self, client_name: str, reason: str = None) -> str:
        """G√©n√®re un message de transfert vers une vraie personne"""
        transfer_messages = [
            f"OK {client_name}, je vais te mettre en contact avec Anne-Sophie directement. Elle va te rappeler dans 2 minutes !",
            f"Parfait, je transf√®re √† Anne-Sophie qui va t'appeler tout de suite.",
            f"Je passe la main √† Anne-Sophie qui va te contacter dans 2 minutes.",
            f"Anne-Sophie va te rappeler imm√©diatement pour s'occuper de √ßa !"
        ]
        
        return transfer_messages[0]  # Version simple pour l'instant
    
    def validate_human_response(self, response: str) -> str:
        """Valide et corrige les r√©ponses pour qu'elles soient naturelles"""
        response_lower = response.lower()
        
        # ‚ùå INTERDIRE ces mots robots SEULEMENT si c'est le d√©but de la r√©ponse
        robot_words = ['bonjour', 'üòä', 'comment puis-je', '√©quipe harley vape', 'n\'h√©sitez pas', 'merci pour votre']
        
        # V√©rifier si la r√©ponse commence par un mot robot
        for word in robot_words:
            if response_lower.startswith(word.lower()):
                # Remplacer par version naturelle
                return "Salut ! Comment je peux t'aider ?"
        
        # ‚ùå INTERDIRE les r√©ponses trop longues (plus de 150 caract√®res)
        if len(response) > 150:
            return "Dis-moi ce qui t'int√©resse ?"
        
        # ‚úÖ Si la r√©ponse est bonne, la garder
        return response
    
    def adapt_tone(self, message: str, urgency: str = "normal") -> str:
        """Adapte le ton selon l'urgence"""
        if urgency == "urgent":
            return f"üö® {message}"
        elif urgency == "positive":
            return f"‚úÖ {message}"
        elif urgency == "warning":
            return f"‚ö†Ô∏è {message}"
        else:
            return message
    
    async def generate_whatsapp_response(self, message: str, context: Dict[str, Any]) -> str:
        """
        üß† G√©n√®re une r√©ponse WhatsApp conversationnelle et personnalis√©e
        Utilise les templates naturels pour des r√©ponses intelligentes
        """
        
        # üéØ UTILISER LES TEMPLATES NATURELS DIRECTEMENT
        client_name = context.get("client_name", "Client")
        client_number = context.get("from", "unknown")
        message_lower = message.lower()
        
        # D√©tection de langue
        if any(word in message_lower for word in ["hello", "hi", "hey", "what", "how", "can", "you", "help", "thanks", "price", "cost", "open", "hours"]):
            lang = "en"
        elif any(word in message_lower for word in ["bonjour", "salut", "quoi", "comment", "peux", "aide", "merci", "prix", "combien", "ouvert", "horaires"]):
            lang = "fr"
        else:
            lang = "fr"  # d√©faut fran√ßais
        
        # Analyse du contexte
        if any(word in message_lower for word in ['price', 'cost', 'precio', 'prix', 'pre√ßo', 'cu√°nto', 'combien', 'quanto']):
            context_type = 'prices'
        elif any(word in message_lower for word in ['open', 'hours', 'horaire', 'abierto', 'aberto', 'ferm√©', 'closed', 'horas', 'ore']):
            context_type = 'hours'
        elif any(word in message_lower for word in ['product', 'vape', 'disponible', 'available', 'producto', 'produit', 'geekbar']):
            context_type = 'products'
        elif any(word in message_lower for word in ['hi', 'hello', 'hola', 'salut', 'ciao', 'oi', 'hey']):
            context_type = 'greeting'
        else:
            context_type = 'general'
        
        # D√©terminer la cat√©gorie de template
        is_first_contact = client_number not in self.client_memory
        if context_type == 'greeting':
            template_category = 'greeting_new' if is_first_contact else 'greeting_return'
        else:
            template_category = context_type
        
        # S√©lectionner r√©ponse al√©atoire
        templates = self.templates[lang][template_category]
        response = random.choice(templates)
        
        # Sauvegarder en m√©moire
        self.client_memory[client_number] = {
            'last_message': message,
            'language': lang,
            'context': context_type,
            'timestamp': asyncio.get_event_loop().time()
        }
        
        # Ajouter la signature
        signature = "\n\n‚Äì L'√©quipe Harley Vape üß°" if lang == 'fr' else "\n\n‚Äì Team Harley Vape üß°"
        
        return response + signature

    async def generate_whatsapp_response_with_openrouter(self, message: str, context: Dict[str, Any]) -> str:
        """
        üß† G√©n√®re une r√©ponse conversationnelle avec GPT-4 via OpenRouter
        Utilise une vraie IA pour des r√©ponses naturelles et contextuelles
        """
        
        client_name = context.get("client_name", "Client")
        client_number = context.get("from", "unknown")
        message_lower = message.lower()
        conversation_history = context.get("conversation_history", [])
        
        # D√©tecter si c'est le premier contact
        is_first_contact = self.is_first_contact(client_number)
        
        # üö® V√âRIFIER SI TRANSFERT VERS HUMAIN
        if self.should_transfer_to_human(message, conversation_history):
            transfer_message = self.generate_transfer_message(client_name)
            # Ajouter un flag pour notifier Anne-Sophie
            context["transfer_to_human"] = True
            context["transfer_reason"] = "Conversation complexe d√©tect√©e"
            return transfer_message
        
        try:
            # D√©tecter la langue du message
            detected_lang = self.detect_language(message)
            
            # üéØ PROMPT POUR OPENROUTER (MULTILINGUE)
            if detected_lang == 'he':  # H√©breu
                system_prompt = f"""You are Luma, Anne-Sophie's WhatsApp assistant for her Harley Vape shop.

PERSONALITY:
- Experienced vape shop seller
- Relaxed but professional tone
- Natural Hebrew speaker
- Maximum 10-15 words per response
- Direct and efficient
- NO "Hello" if not first message
- NO systematic smile emoji

IMPORTANT INFO:
- Shop: Harley Vape
- Hours: 12:00-21:00 daily (Paris time)
- WhatsApp available 24/7
- Website: www.harleyvape.love

CONTEXT:
- Client: {client_name}
- First contact: {"Yes" if is_first_contact else "No"}
- Message: "{message}"
- History: {len(conversation_history)} previous messages

STRICT RULES:
- Answer ONLY in 1-2 short sentences
- Natural Hebrew seller tone
- No excessive formalities
- No systematic emojis
- Direct and useful response

EXAMPLES:
Client: "◊©◊ú◊ï◊ù" (Hello)
‚Üí "◊©◊ú◊ï◊ù! ◊ê◊ô◊ö ◊ê◊†◊ô ◊ô◊õ◊ï◊ú ◊ú◊¢◊ñ◊ï◊® ◊ú◊ö?" (Hello! How can I help you?)

Client: "◊ô◊© ◊ú◊õ◊ù ◊í◊ô◊ß◊ë◊®?" (Do you have geekbar?)
‚Üí "◊õ◊ü, ◊ô◊© ◊ú◊†◊ï ◊õ◊û◊î ◊û◊ï◊ì◊ú◊ô◊ù. ◊ê◊ô◊ñ◊î ◊ê◊™◊î ◊û◊ó◊§◊©?" (Yes, we have several models. Which one are you looking for?)

Answer like a natural Hebrew vape shop seller:"""
            
            elif detected_lang == 'en':  # Anglais
                system_prompt = f"""You are Luma, Anne-Sophie's WhatsApp assistant for her Harley Vape shop.

PERSONALITY:
- Experienced vape shop seller
- Relaxed but professional tone
- Natural English speaker
- Maximum 10-15 words per response
- Direct and efficient
- NO "Hello" if not first message
- NO systematic smile emoji

IMPORTANT INFO:
- Shop: Harley Vape
- Hours: 12:00-21:00 daily (Paris time)
- WhatsApp available 24/7
- Website: www.harleyvape.love

CONTEXT:
- Client: {client_name}
- First contact: {"Yes" if is_first_contact else "No"}
- Message: "{message}"
- History: {len(conversation_history)} previous messages

STRICT RULES:
- Answer ONLY in 1-2 short sentences
- Natural English seller tone
- No excessive formalities
- No systematic emojis
- Direct and useful response

EXAMPLES:
Client: "Do you have geekbar?"
‚Üí "Yeah, several models. Which one are you looking for?"

Client: "Are you open?"
‚Üí "Yes, until 9pm. Coming by?"

Answer like a natural English vape shop seller:"""
            
            else:  # Fran√ßais (d√©faut)
                system_prompt = f"""Tu es Luma, assistante WhatsApp personnelle d'Anne-Sophie pour sa boutique Harley Vape.

PERSONNALIT√â:
- Vendeur exp√©riment√© de vape shop en France
- Ton d√©contract√© mais professionnel
- Fran√ßais naturel de vendeur
- Maximum 10-15 mots par r√©ponse
- Direct et efficace
- JAMAIS de "Bonjour" si pas le premier message
- JAMAIS d'√©moji sourire syst√©matique

INFORMATIONS IMPORTANTES:
- Boutique: Harley Vape
- Horaires: 12h00-21h00 tous les jours (heure de Paris)
- WhatsApp disponible 24h/24
- Site web: www.harleyvape.love

CONTEXTE:
- Client: {client_name}
- Premier contact: {"Oui" if is_first_contact else "Non"}
- Message: "{message}"
- Historique: {len(conversation_history)} messages pr√©c√©dents

R√àGLES STRICTES:
- R√©ponds UNIQUEMENT en 1-2 phrases courtes
- Ton naturel de vendeur fran√ßais
- Pas de formalit√©s excessives
- Pas d'√©mojis syst√©matiques
- R√©ponse directe et utile

EXEMPLES:
Client: "Tu as des geekbar ?"
‚Üí "Ouais, plusieurs mod√®les. Lequel tu cherches ?"

Client: "C'est ouvert ?"
‚Üí "Oui, jusqu'√† 21h. Tu passes ?"

R√©ponds comme un vrai vendeur fran√ßais d√©contract√©:"""

            # üöÄ APPEL OPENROUTER
            response = self.openai_client.chat.completions.create(
                model=self.openrouter_model,
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": message}
                ],
                temperature=0.7,
                max_tokens=120
            )
            
            ai_response = response.choices[0].message.content.strip()
            
            # üßπ NETTOYAGE DE LA R√âPONSE
            # Supprimer les guillemets si pr√©sents
            if ai_response.startswith('"') and ai_response.endswith('"'):
                ai_response = ai_response[1:-1]
            
            # Ajouter la signature
            signature = "\n\n‚Äì L'√©quipe Harley Vape üß°"
            
            return ai_response + signature
        
        except Exception as e:
            logging.error(f"‚ùå Erreur OpenRouter: {e}")
            # Fallback vers templates naturels
            return await self.generate_whatsapp_response(message, context)
    
    def detect_language(self, message: str) -> str:
        """D√©tecte la langue du message"""
        message_lower = message.lower()
        
        # D√©tection h√©breu (caract√®res h√©breux)
        hebrew_chars = re.search(r'[\u0590-\u05FF]', message)
        if hebrew_chars:
            return 'he'
        
        patterns = {
            'en': r'\b(hello|hi|hey|what|how|can|you|help|thanks|price|cost|open|hours)\b',
            'es': r'\b(hola|qu√©|c√≥mo|puedes|ayuda|gracias|precio|cu√°nto|abierto|horas)\b',
            'fr': r'\b(bonjour|salut|quoi|comment|peux|aide|merci|prix|combien|ouvert|horaires)\b',
            'it': r'\b(ciao|cosa|come|puoi|aiuto|grazie|prezzo|quanto|aperto|ore)\b',
            'pt': r'\b(ol√°|oi|que|como|pode|ajuda|obrigado|pre√ßo|quanto|aberto|horas)\b'
        }
        
        for lang, pattern in patterns.items():
            if re.search(pattern, message_lower):
                return lang
        
        return 'fr'  # d√©faut fran√ßais


if __name__ == "__main__":
    # Test de la personnalit√© LUMA
    personality = LumaPersonality()
    
    # Test morning briefing
    morning_context = {
        "emails": "3",
        "orders": "1",
        "whatsapp": "2",
        "insight": "Journ√©e productive en vue !"
    }
    
    morning_msg = personality.generate_response("morning_briefing", morning_context)
    print("üåû Test Template Lulu:")
    print(morning_msg)
    
    # Test urgent alert
    urgent_context = {
        "message": "Client m√©content sur Instagram"
    }
    
    urgent_msg = personality.generate_response("urgent_alert", urgent_context)
    print("\nüö® Test Alerte Urgente:")
    print(urgent_msg) 