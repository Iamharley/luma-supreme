#!/usr/bin/env python3
"""
üî• LUMA BUSINESS PRO - N8N WHATSAPP INTEGRATION
===============================================
Architecture compl√®te pour r√©ponses WhatsApp automatiques
N8N (Webhook) ‚Üí LUMA (IA Response) ‚Üí WhatsApp (Reply)
===============================================
FICHIER POUR CURSOR - modules/whatsapp_n8n_service.py
"""

import asyncio
import json
import logging
from datetime import datetime
from typing import Dict, List, Optional
from flask import Flask, request, jsonify
import requests
import re
from dataclasses import dataclass
import os
from dotenv import load_dotenv
import random

# Charger configuration
load_dotenv('config/.env')

# ==================================================================
# üîó N8N WEBHOOK RECEIVER - POINT D'ENTR√âE WHATSAPP
# ==================================================================

class N8NWebhookReceiver:
    """
    üì± R√©cepteur webhook N8N pour messages WhatsApp
    Point d'entr√©e de tous les messages clients
    """
    
    def __init__(self, luma_processor):
        self.app = Flask(__name__)
        self.luma_processor = luma_processor
        self.setup_routes()
        
    def setup_routes(self):
        """Configuration des routes Flask"""
        
        @self.app.route('/webhook/whatsapp', methods=['POST'])
        def handle_whatsapp_message():
            """
            üì® R√©ception message WhatsApp depuis N8N
            Format attendu depuis N8N workflow
            """
            try:
                data = request.get_json()
                
                # Extraction donn√©es message
                message_data = {
                    'phone': data.get('from', ''),
                    'message': data.get('message', ''),
                    'timestamp': data.get('timestamp', datetime.now().isoformat()),
                    'message_id': data.get('id', ''),
                    'contact_name': data.get('contact_name', 'Client'),
                    'media_type': data.get('media_type', 'text')
                }
                
                logging.info(f"üì± Message WhatsApp re√ßu: {message_data['phone']} - {message_data['message'][:50]}...")
                
                # Traitement par LUMA (synchrone pour Flask)
                response = asyncio.run(self.luma_processor.process_whatsapp_message(message_data))
                
                return jsonify({
                    'status': 'success',
                    'luma_response': response,
                    'processed_at': datetime.now().isoformat()
                })
                
            except Exception as e:
                logging.error(f"‚ùå Erreur webhook WhatsApp: {e}")
                return jsonify({
                    'status': 'error',
                    'error': str(e)
                }), 500
        
        @self.app.route('/webhook/whatsapp/status', methods=['POST'])
        def handle_delivery_status():
            """üìã Gestion statuts de livraison messages"""
            try:
                data = request.get_json()
                status = data.get('status', 'unknown')
                message_id = data.get('message_id', '')
                
                logging.info(f"üìä Statut message {message_id}: {status}")
                
                return jsonify({'status': 'acknowledged'})
                
            except Exception as e:
                logging.error(f"‚ùå Erreur statut: {e}")
                return jsonify({'status': 'error'}), 500
        
        @self.app.route('/health', methods=['GET'])
        def health_check():
            """üíö Health check pour monitoring"""
            return jsonify({
                'status': 'healthy',
                'service': 'LUMA WhatsApp',
                'timestamp': datetime.now().isoformat()
            })
    
    def start_server(self, host='localhost', port=5000):
        """üöÄ D√©marrage serveur webhook"""
        logging.info(f"üîó Serveur webhook N8N d√©marr√© sur {host}:{port}")
        self.app.run(host=host, port=port, debug=False)

# ==================================================================
# üß† LUMA WHATSAPP PROCESSOR - INTELLIGENCE R√âPONSE
# ==================================================================

@dataclass
class WhatsAppContext:
    """Contexte client WhatsApp"""
    phone: str
    name: str
    last_interaction: Optional[datetime] = None
    interaction_count: int = 0
    preferred_language: str = "fr"
    vip_status: bool = False
    notes: str = ""

class LumaWhatsAppProcessor:
    """
    ü§ñ Processeur LUMA pour messages WhatsApp
    Analyse + Contexte + G√©n√©ration r√©ponse + Envoi N8N
    """
    
    def __init__(self, config: Dict):
        self.config = config
        self.n8n_webhook_url = config.get('n8n_send_webhook', '')
        
        # Import modules LUMA existants
        try:
            import sys
            import os
            sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
            from core.luma_personality import LumaPersonality
            self.personality = LumaPersonality()
            logging.info("‚úÖ Personnalit√© LUMA charg√©e")
        except ImportError as e:
            logging.error(f"‚ùå Erreur import LUMA: {e}")
            self.personality = None
        
        # Cache contexte clients
        self.client_contexts = {}
        
        # Historique conversations pour d√©tection transfert
        self.conversation_histories = {}
        
        # Templates WhatsApp sp√©cialis√©s
        self.whatsapp_templates = self._load_whatsapp_templates()
    
    def _load_whatsapp_templates(self) -> Dict:
        """üì± Templates WhatsApp sp√©cialis√©s (style Lulu)"""
        return {
            "welcome_new_client": {
                "template": "Bonjour {name} ! üëã\nMerci de contacter Harley Vape !\n\nJe suis LUMA, l'assistante digitale d'Anne-Sophie. Comment puis-je vous aider aujourd'hui ? üòä\n\nüõí Commandes\nüì¶ Suivi livraison\n‚ùì Questions produits\n\nR√©pondez simplement !",
                "tone": "chaleureux_professionnel"
            },
            
            "order_inquiry": {
                "template": "üì¶ Commande en cours !\n\nBonjour {name}, je v√©rifie votre commande imm√©diatement.\n\nVotre demande est prise en compte et notre √©quipe vous recontacte tr√®s rapidement avec toutes les infos ! üòä\n\nAutre chose pour vous aider ?",
                "tone": "informatif_rassurant"
            },
            
            "product_question": {
                "template": "üõí Questions produits !\n\nSalut {name} ! Excellente question sur nos produits Harley Vape.\n\nNotre √©quipe sp√©cialis√©e analyse votre demande et vous r√©pond avec tous les d√©tails dans les plus brefs d√©lais !\n\nVoulez-vous que je vous mette en contact direct avec Anne-Sophie ? üìû",
                "tone": "expert_conseil"
            },
            
            "urgent_support": {
                "template": "üö® URGENT - Pris en charge !\n\nBonjour {name}, je comprends l'urgence de votre situation.\n\nJe transmets imm√©diatement √† Anne-Sophie qui vous recontacte sous 30 minutes maximum.\n\nVotre demande urgente est notre priorit√© absolue ! üíô",
                "tone": "urgent_rassurant"
            },
            
            "after_hours": {
                "template": "üåô Harley Vape - Hors horaires\n\nBonsoir {name} !\n\nIl est {time} et notre √©quipe est en repos bien m√©rit√© üò¥\n\nVotre message est enregistr√© et nous vous r√©pondons d√®s demain matin (9h-18h).\n\nBonne soir√©e ! üåü",
                "tone": "bienveillant_informatif"
            },
            
            "general_response": {
                "template": "Salut {name} ! üòä\n\nMerci pour votre message ! Je suis LUMA, l'assistante d'Anne-Sophie pour Harley Vape.\n\nComment puis-je vous aider ?\n\nüõí Commandes et produits\nüìû Contact direct\n‚ùì Questions diverses\n\nJe suis l√† pour vous ! üíô",
                "tone": "chaleureux_disponible"
            }
        }
    
    async def process_whatsapp_message(self, message_data: Dict) -> str:
        """
        ‚ö° Traitement principal message WhatsApp
        Pipeline complet: Analyse ‚Üí Contexte ‚Üí R√©ponse ‚Üí Envoi
        """
        
        phone = message_data['phone']
        message = message_data['message']
        contact_name = message_data.get('contact_name', 'Client')
        
        try:
            # 1. R√©cup√©rer/cr√©er contexte client
            context = await self._get_client_context(phone, contact_name)
            
            # 2. Analyser intention message
            intent_analysis = await self._analyze_message_intent(message, context)
            
            # 3. G√©n√©rer r√©ponse contextuelle
            logging.info("üß† Tentative g√©n√©ration r√©ponse...")
            try:
                response = await self._generate_contextual_response(
                    message, context, intent_analysis
                )
                logging.info("‚úÖ R√©ponse g√©n√©r√©e avec succ√®s")
            except Exception as e:
                logging.error(f"‚ùå Erreur g√©n√©ration r√©ponse: {e}")
                import traceback
                logging.error(f"‚ùå Traceback: {traceback.format_exc()}")
                # Fallback simple
                response = f"Bonjour {contact_name} ! Merci pour votre message. Notre √©quipe Harley Vape vous r√©pond tr√®s rapidement ! üòä"
            
            # 4. Envoyer via N8N webhook (si configur√©)
            if self.n8n_webhook_url:
                await self._send_via_n8n(phone, response, message_data)
            
            # 5. Mettre √† jour contexte client
            await self._update_client_context(context, message, response)
            
            # 6. Log pour monitoring
            await self._log_interaction(phone, message, response, intent_analysis)
            
            return response
            
        except Exception as e:
            logging.error(f"‚ùå Erreur traitement WhatsApp {phone}: {e}")
            import traceback
            logging.error(f"‚ùå Traceback: {traceback.format_exc()}")
            
            # R√©ponse de fallback
            fallback_response = f"Bonjour {contact_name} ! Merci pour votre message. Notre √©quipe Harley Vape vous r√©pond tr√®s rapidement ! üòä"
            
            if self.n8n_webhook_url:
                await self._send_via_n8n(phone, fallback_response, message_data)
            
            return fallback_response
    
    async def _analyze_message_intent(self, message: str, context: WhatsAppContext) -> Dict:
        """
        üîç Analyse intention du message client
        Classification automatique pour r√©ponse adapt√©e
        """
        
        message_lower = message.lower()
        
        # Mots-cl√©s par intention
        intent_keywords = {
            "order_inquiry": ["commande", "order", "suivi", "tracking", "livraison", "delivery", "r√©f√©rence", "ref"],
            "product_question": ["produit", "product", "prix", "price", "disponible", "stock", "conseil", "recommande"],
            "urgent_support": ["urgent", "probl√®me", "problem", "help", "aide", "bug", "erreur", "r√©clamation"],
            "greeting": ["bonjour", "hello", "salut", "hi", "bonsoir", "coucou"],
            "thanks": ["merci", "thank", "parfait", "super", "g√©nial", "top"],
            "complaint": ["d√©√ßu", "m√©content", "nul", "mauvais", "insatisfait", "remboursement", "annuler"]
        }
        
        # Analyse sentiment
        positive_words = ["bien", "parfait", "merci", "super", "g√©nial", "top", "excellent"]
        negative_words = ["probl√®me", "d√©√ßu", "nul", "mauvais", "erreur", "bug", "urgent"]
        
        sentiment = "neutral"
        if any(word in message_lower for word in positive_words):
            sentiment = "positive"
        elif any(word in message_lower for word in negative_words):
            sentiment = "negative"
        
        # D√©tection intention principale
        detected_intent = "general"
        max_matches = 0
        
        for intent, keywords in intent_keywords.items():
            matches = sum(1 for keyword in keywords if keyword in message_lower)
            if matches > max_matches:
                max_matches = matches
                detected_intent = intent
        
        # Contexte temporel
        current_hour = datetime.now().hour
        is_business_hours = 9 <= current_hour <= 18
        
        # Urgence d√©tect√©e
        urgency_level = "normal"
        if any(word in message_lower for word in ["urgent", "imm√©diat", "tout de suite", "maintenant"]):
            urgency_level = "high"
        elif not is_business_hours:
            urgency_level = "low"
        
        return {
            "intent": detected_intent,
            "sentiment": sentiment,
            "urgency": urgency_level,
            "is_business_hours": is_business_hours,
            "confidence": min(max_matches / 3, 1.0),
            "keywords_found": max_matches
        }
    
    async def _generate_contextual_response(self, 
                                          message: str, 
                                          context: WhatsAppContext,
                                          intent_analysis: Dict) -> str:
        """
        üß† G√©n√©ration r√©ponse IA conversationnelle
        Utilise la vraie IA LUMA pour des r√©ponses personnalis√©es
        """
        logging.info(f"üß† _generate_contextual_response appel√©e avec message: {message[:50]}...")
        
        # Utiliser la vraie IA LUMA si disponible
        logging.info(f"üß† Personality disponible: {self.personality is not None}")
        if self.personality:
            try:
                # Contexte pour l'IA
                ai_context = {
                    "client_name": context.name,
                    "from": context.phone,  # Pour d√©tection premier contact
                    "client_phone": context.phone,
                    "interaction_count": context.interaction_count,
                    "preferred_language": context.preferred_language,
                    "business_hours": intent_analysis["is_business_hours"],
                    "urgency": intent_analysis["urgency"],
                    "intent": intent_analysis["intent"],
                    "sentiment": intent_analysis["sentiment"],
                    "business": "Harley Vape",
                    "owner": "Anne-Sophie",
                    "conversation_history": self._get_conversation_history(context.phone)
                }
                
                # G√©n√©rer r√©ponse avec IA + OpenRouter
                logging.info("üß† Tentative OpenRouter...")
                
                try:
                    # Appeler OpenRouter via la personnalit√© LUMA
                    ai_response = await self.personality.generate_whatsapp_response_with_openrouter(message, ai_context)
                    logging.info("‚úÖ OpenRouter utilis√© avec succ√®s!")
                    return ai_response
                    
                except Exception as e:
                    logging.warning(f"‚ö†Ô∏è OpenRouter non disponible, fallback templates: {e}")
                    # Fallback vers templates naturels
                    return await self.personality.generate_whatsapp_response(message, ai_context)
                
            except Exception as e:
                logging.error(f"‚ùå Erreur IA LUMA: {e}")
                # Fallback vers templates basiques
        
        # üéØ UTILISER LES TEMPLATES NATURELS DIRECTEMENT
        # (solution temporaire pendant qu'on corrige Ollama)
        
        # D√©tection de langue
        message_lower = message.lower()
        if any(word in message_lower for word in ["hello", "hi", "hey", "what", "how", "can", "you", "help", "thanks", "price", "cost", "open", "hours"]):
            lang = "en"
        elif any(word in message_lower for word in ["bonjour", "salut", "quoi", "comment", "peux", "aide", "merci", "prix", "combien", "ouvert", "horaires"]):
            lang = "fr"
        else:
            lang = "fr"  # d√©faut fran√ßais
        
        # Analyse du contexte
        if any(word in message_lower for word in ['price', 'cost', 'precio', 'prix', 'pre√ßo', 'cu√°nto', 'combien', 'quanto']):
            context_type = 'prices'
        elif any(word in message_lower for word in ['open', 'hours', 'horaire', 'abierto', 'aberto', 'ferm√©', 'closed', 'horas', 'ore']):
            context_type = 'hours'
        elif any(word in message_lower for word in ['product', 'vape', 'disponible', 'available', 'producto', 'produit', 'geekbar']):
            context_type = 'products'
        elif any(word in message_lower for word in ['hi', 'hello', 'hola', 'salut', 'ciao', 'oi', 'hey']):
            context_type = 'greeting'
        else:
            context_type = 'general'
        
        # Templates naturels
        templates = {
            'en': {
                'greeting_new': ["Hey! What can I help you with?", "Hi there! What do you need?"],
                'greeting_return': ["What's up?", "How can I help?", "Need anything?"],
                'products': ["What are you looking for?", "Which product interests you?"],
                'hours': ["We're open 12pm-9pm daily. Coming by?", "Open until 9pm. What do you need?"],
                'prices': ["Depends what you want. What are you interested in?"],
                'general': ["What do you need?", "How can I help?", "What's up?"]
            },
            'fr': {
                'greeting_new': ["Salut ! Je peux t'aider ?", "Hey ! Qu'est-ce qu'il te faut ?"],
                'greeting_return': ["Salut !", "Je peux t'aider ?", "Tu veux quoi ?"],
                'products': ["Tu cherches quoi ?", "Quel produit t'int√©resse ?"],
                'hours': ["Ouvert 12h-21h tous les jours. Tu passes ?", "Jusqu'√† 21h. Tu veux quoi ?"],
                'prices': ["√áa d√©pend de quoi. Dis-moi ce qui t'int√©resse ?"],
                'general': ["Tu veux quoi ?", "Je peux t'aider ?", "Qu'est-ce qu'il te faut ?"]
            }
        }
        
        # D√©terminer la cat√©gorie de template
        is_first_contact = context.interaction_count == 0
        if context_type == 'greeting':
            template_category = 'greeting_new' if is_first_contact else 'greeting_return'
        else:
            template_category = context_type
        
        # S√©lectionner r√©ponse al√©atoire
        response_templates = templates[lang][template_category]
        response = random.choice(response_templates)
        
        # Ajouter la signature
        signature = "\n\n‚Äì L'√©quipe Harley Vape üß°" if lang == 'fr' else "\n\n‚Äì Team Harley Vape üß°"
        
        return response + signature
    
    async def _send_via_n8n(self, phone: str, response: str, original_data: Dict):
        """
        üì§ Envoi r√©ponse via webhook N8N
        N8N se charge de l'envoi WhatsApp effectif
        """
        
        if not self.n8n_webhook_url:
            logging.info("‚ö†Ô∏è N8N webhook URL non configur√©e - r√©ponse g√©n√©r√©e uniquement")
            return
        
        payload = {
            "phone": phone,
            "message": response,
            "timestamp": datetime.now().isoformat(),
            "original_message_id": original_data.get('message_id', ''),
            "luma_processed": True,
            "priority": "normal"
        }
        
        try:
            response_n8n = requests.post(
                self.n8n_webhook_url,
                json=payload,
                timeout=10,
                headers={"Content-Type": "application/json"}
            )
            
            if response_n8n.status_code == 200:
                logging.info(f"‚úÖ Message envoy√© via N8N: {phone}")
            else:
                logging.warning(f"‚ö†Ô∏è N8N response {response_n8n.status_code}: {response_n8n.text}")
                
        except Exception as e:
            logging.error(f"‚ùå Erreur envoi N8N: {e}")
    
    async def _get_client_context(self, phone: str, name: str) -> WhatsAppContext:
        """üìã R√©cup√©ration/cr√©ation contexte client"""
        
        if phone in self.client_contexts:
            context = self.client_contexts[phone]
            context.interaction_count += 1
            context.last_interaction = datetime.now()
        else:
            context = WhatsAppContext(
                phone=phone,
                name=name,
                last_interaction=datetime.now(),
                interaction_count=1,
                preferred_language="fr",
                vip_status=False,
                notes=""
            )
            self.client_contexts[phone] = context
        
        return context
    
    async def _update_client_context(self, context: WhatsAppContext, message: str, response: str):
        """üìù Mise √† jour contexte apr√®s interaction"""
        
        # D√©tection langue
        if any(word in message.lower() for word in ["hello", "hi", "english", "thank you"]):
            context.preferred_language = "en"
        
        # Mise √† jour notes (apprentissage)
        if len(context.notes) < 200:
            context.notes += f" {datetime.now().strftime('%d/%m')}: {message[:50]}..."
    
    def _get_conversation_history(self, phone: str) -> list:
        """R√©cup√®re l'historique des conversations pour un client"""
        return self.conversation_histories.get(phone, [])
    
    def _add_to_conversation_history(self, phone: str, message: str, response: str):
        """Ajoute un √©change √† l'historique des conversations"""
        if phone not in self.conversation_histories:
            self.conversation_histories[phone] = []
        
        self.conversation_histories[phone].append({
            "timestamp": datetime.now().isoformat(),
            "message": message,
            "response": response
        })
        
        # Garder seulement les 10 derniers √©changes
        if len(self.conversation_histories[phone]) > 10:
            self.conversation_histories[phone] = self.conversation_histories[phone][-10:]
    
    def _notify_human_transfer(self, context: WhatsAppContext, message: str, reason: str):
        """Notifie Anne-Sophie d'un transfert vers humain"""
        notification = {
            "type": "human_transfer",
            "client_name": context.name,
            "client_phone": context.phone,
            "message": message,
            "reason": reason,
            "timestamp": datetime.now().isoformat(),
            "urgency": "high"
        }
        
        logging.warning(f"üö® NOTIFICATION TRANSFERT HUMAIN: {json.dumps(notification)}")
        
        # Ici on pourrait envoyer une notification √† Anne-Sophie
        # Par exemple via email, SMS, ou webhook vers son t√©l√©phone
        # Pour l'instant, on log juste
    
    async def _log_interaction(self, phone: str, message: str, response: str, intent_analysis: Dict):
        """üìä Log interaction pour analytics"""
        
        log_data = {
            "timestamp": datetime.now().isoformat(),
            "phone": phone[-4:],  # Seulement 4 derniers chiffres pour privacy
            "message_length": len(message),
            "response_length": len(response), 
            "intent": intent_analysis["intent"],
            "sentiment": intent_analysis["sentiment"],
            "confidence": intent_analysis["confidence"]
        }
        
        logging.info(f"üìä WhatsApp interaction: {json.dumps(log_data)}")
        
        # Ajouter √† l'historique des conversations
        self._add_to_conversation_history(phone, message, response)

# ==================================================================
# üöÄ LUMA WHATSAPP SERVICE - ORCHESTRATEUR PRINCIPAL
# ==================================================================

class LumaWhatsAppService:
    """
    üéØ Service principal WhatsApp pour LUMA Business Pro
    Combine webhook receiver + processor + monitoring
    """
    
    def __init__(self, config: Dict):
        self.config = config
        self.processor = LumaWhatsAppProcessor(config)
        self.webhook_receiver = N8NWebhookReceiver(self.processor)
        
    def start_service(self):
        """üöÄ D√©marrage service WhatsApp complet"""
        
        logging.info("üì± LUMA WhatsApp Service - D√©marrage")
        logging.info(f"üîó Webhook: {self.config.get('webhook_host', 'localhost')}:{self.config.get('webhook_port', 5000)}")
        logging.info(f"üì§ N8N Send: {self.config.get('n8n_send_webhook', 'Non configur√©')}")
        
        # D√©marrage serveur webhook
        self.webhook_receiver.start_server(
            host=self.config.get('webhook_host', 'localhost'),
            port=self.config.get('webhook_port', 5000)
        )

# ==================================================================
# üîß CONFIGURATION & LANCEMENT
# ==================================================================

def create_whatsapp_config() -> Dict:
    """‚öôÔ∏è Configuration WhatsApp + N8N pour LUMA"""
    
    return {
        # Webhook configuration
        'webhook_host': os.getenv('LUMA_WEBHOOK_HOST', 'localhost'),
        'webhook_port': int(os.getenv('LUMA_WEBHOOK_PORT', 5001)),
        
        # N8N webhooks
        'n8n_send_webhook': os.getenv('N8N_SEND_WEBHOOK', ''),
        
        # Business info
        'business_name': 'Harley Vape',
        'business_phone': os.getenv('BUSINESS_PHONE', '+33123456789'),
        'business_hours': {'start': 9, 'end': 18},
        
        # LUMA config
        'response_delay': 2,
        'max_message_length': 1000,
        'auto_response_enabled': True,
        
        # APIs
        'whatsapp_access_token': os.getenv('WHATSAPP_ACCESS_TOKEN', ''),
        'whatsapp_phone_number_id': os.getenv('WHATSAPP_PHONE_NUMBER_ID', ''),
        'openai_key': os.getenv('OPENAI_API_KEY', ''),
        'claude_key': os.getenv('CLAUDE_API_KEY', ''),
        'openrouter_api_key': os.getenv('OPENROUTER_API_KEY', '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'),
        'openrouter_model': os.getenv('OPENROUTER_MODEL', 'openai/gpt-4-turbo')
    }

def main():
    """üéØ Point d'entr√©e principal service WhatsApp"""
    
    # Configuration logging
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s'
    )
    
    # Configuration
    config = create_whatsapp_config()
    
    # Initialisation service
    whatsapp_service = LumaWhatsAppService(config)
    
    print("üî• LUMA BUSINESS PRO - WHATSAPP SERVICE")
    print("üì± R√©ponses automatiques clients via N8N")
    print("üíô Templates Lulu int√©gr√©s")
    print("‚ö° Intelligence contextuelle activ√©e")
    print(f"üîó Webhook: http://{config['webhook_host']}:{config['webhook_port']}/webhook/whatsapp")
    print("\nüöÄ Service d√©marr√© ! En attente messages...")
    
    try:
        # D√©marrage service
        whatsapp_service.start_service()
    except KeyboardInterrupt:
        print("\nüëã Service WhatsApp LUMA arr√™t√©")
    except Exception as e:
        print(f"üí• Erreur critique: {e}")
        logging.error(f"Erreur service WhatsApp: {e}")

if __name__ == "__main__":
    main() 